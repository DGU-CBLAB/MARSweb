
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############### get input ###############
> args=(commandArgs(TRUE))
> print(length(args))
[1] 8
> if(length(args)!=8){
+         print("Usage: R CMD BATCH --args -snp=X.txt -pheno=Y.txt -out=./ -- generateInputMS.R\n
+                         snp is sample by snp matrix/vector\n
+                         pheno is sample by phenotypes matrix\n")
+         stop ()
+ }
> for( i in c(1:8)){
+         str = unlist(strsplit(args[i],"="))[1]
+         if(str=="-snp")    		 snp = unlist(strsplit(args[i],"="))[2]
+         else if(str=="-pheno")  	 pheno = unlist(strsplit(args[i],"="))[2]
+         else if(str=="-out")   	 	 out = unlist(strsplit(args[i],"="))[2]
+ 	else if(str=="-Mvalue") 	 Mvalue = unlist(strsplit(args[i],"="))[2]
+ 	else if(str=="-MvalueThreshold") MvalueThreshold = unlist(strsplit(args[i],"="))[2]
+ 	else if(str=="-Pdefault")        Pdefault = unlist(strsplit(args[i],"="))[2]
+ 	else if(str=="-minGeneNumber")   minGeneNumber = as.double(unlist(strsplit(args[i],"="))[2])
+ 	else if(str=="-NICE")  		 NICE = unlist(strsplit(args[i],"="))[2]
+         else{
+ 		print(str);
+                 print("Usage: R CMD BATCH --args -snp=X.txt -pheno=Y.txt -out=./ -- generateInputMS.R\n\t
+                         snp is sample by snp matrix/vector\n\t
+                         pheno is sample by phenotypes matrix\n")
+                 stop ()
+         }
+ }
> print(snp)
[1] "/DATA/taegun/simulation_data/jwjjoo/result/sample/X_rightdim.txt"
> print(pheno)
[1] "/DATA/taegun/simulation_data/jwjjoo/result/sample/Y_rightdim.txt"
> print(out)
[1] "./test/"
> print(MvalueThreshold)
[1] "0.5"
> print(Mvalue)
[1] "./test/posterior_origin.txt"
> print(Pdefault)
[1] "/DATA/taegun/simulation_data/jwjjoo/result/sample/sim_p_ttest.txt"
> print(minGeneNumber)
[1] 10
> print(NICE)
[1] "./"
> normMe <- function(exprs){
+   return((exprs - matrix(rowMeans(exprs, na.rm=TRUE),nrow(exprs),ncol(exprs))) / matrix(apply(exprs,1,sd,na.rm=TRUE),nrow(exprs),ncol(exprs)));
+ }
> ####### generate Yi, Ki ##########
> unlink(paste(out,"/NICE_temp",sep=""), recursive=TRUE)
> dir.create(paste(out,"/NICE_temp",sep=""))
> X = as.matrix(read.table(snp))
> Y = as.matrix(read.table(pheno))
> P = as.matrix(read.table(Pdefault))
> snpNum = dim(X)[2]
> geneNum = dim(Y)[2]
> indiNum = dim(X)[1]
> if (snpNum==1) {M = matrix(as.matrix(read.table(Mvalue, skip=1))[,17:(16+geneNum*2)],snpNum,geneNum*2)}
> if (snpNum!=1) {M = as.matrix(read.table(Mvalue, skip=1))[,(17+geneNum):(16+geneNum*2)]}
> print(dim(M))
[1] 1000 1000
> print(snpNum)
[1] 1000
> print(geneNum)
[1] 1000
> write.table(t(Y),paste(pheno,"_t",sep=""),row.names=FALSE, col.names=FALSE, quote=FALSE)
> for (i in c(1:snpNum)){                                         # for each snp, make Y_i with non significant genes using M value thresholding for the SNP
+         nonSigGenes = which( M[i,] < MvalueThreshold )     # Select transbands which have base(small) baseFrac of pvalue #
+ 
+         if((length(nonSigGenes) >= minGeneNumber) && length(nonSigGenes)>=10){
+                 print(i)
+ 		Yi = t(Y[ ,nonSigGenes])
+ 		Xi = t(X[ ,i])
+ 		Ki = cov(normMe(Yi))
+                 write.table(t(X[ ,i]), paste(out,"/NICE_temp/X_",i,".txt",sep=""), row.names=F, col.names=F)
+ 	 	write.table(Ki, paste(out,"/NICE_temp/K_",i,".txt",sep=""), row.names=F, col.names=F)
+ 		destfile = paste(NICE,"/NICE_temp/P_",i,".txt",sep="")
+ 		system(paste(NICE,"/emma ", geneNum," 1 ",indiNum," ", pheno,"_t " ,out,"/NICE_temp/X_",i,".txt ",out,"/NICE_temp/K_",i,".txt ", out,"/NICE_temp/P_",i,".txt",sep=""))
+ 		P[i,]=t(read.table(paste(out,"/NICE_temp/P_",i,".txt",sep="")))
+         }
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 101
[1] 102
Error in read.table(paste(out, "/NICE_temp/P_", i, ".txt", sep = "")) : 
  no lines available in input
Calls: t -> read.table
Execution halted
