
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> rm(list=ls())
> library(ggplot2)
> library(ggrepel)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> #### get input ####
> args=(commandArgs(TRUE))
> print(length(args))
[1] 3
> if(length(args)!=3){
+   print("Usage: R CMD BATCH --args -result=result_file -threshold=0.01 -out=file.tiff -- eqtlPlot.R\n
+                         result is output file by MarsNet\n")
+   stop ()
+ }
> for( i in c(1:3)){
+   str = unlist(strsplit(args[i],"="))[1]
+   if(str=="-result")                  result_path = unlist(strsplit(args[i],"="))[2]
+   else if(str=="-out")             outputpath = unlist(strsplit(args[i],"="))[2]
+   else if(str=="-threshold")   threshold = as.double(unlist(strsplit(args[i],"="))[2])
+   else{
+     print(str);
+     print("Usage: R CMD BATCH --args -result=result_file -threshold=0.01 -out=file.tiff -- venn.R\n
+                         result is output file by MarsNet\n")
+     stop ()
+   }
+ }
> 
> data <-  read.table(result_path, header = T, stringsAsFactors=F)
> ## Manhattan plot
> interest_gene1 = data[(data$LRT < threshold & data$UNIV > threshold),]$GENE
> interest_gene2 = data[(data$LRT > threshold & data$UNIV < threshold),]$GENE
> data = data[(data$LRT < threshold | data$UNIV < threshold),]
> 
> # Prepare the dataset
> {
+   don <- data %>% 
+     
+     # Compute chromosome size
+     group_by(CHR) %>% 
+     summarise(chr_len=max(BP)) %>% 
+     
+     # Calculate cumulative position of each chromosome
+     mutate(tot=cumsum(chr_len)-chr_len) %>%
+     select(-chr_len) %>%
+     
+     # Add this info to the initial dataset
+     left_join(data, ., by=c("CHR"="CHR")) %>%
+     
+     # Add a cumulative position of each SNP
+     arrange(CHR, BP) %>%
+     mutate( BPcum=BP+tot) %>%
+     
+     # Add highlight and annotation information
+     mutate( is_highlight=ifelse(GENE %in% interest_gene1, "yes", "no")) %>% mutate( is_annotate=ifelse(GENE %in% interest_gene1, "yes", "no")) %>%  
+     mutate( is_highlight2=ifelse(GENE %in% interest_gene2, "yes", "no")) %>% mutate( is_annotate2=ifelse(GENE %in% interest_gene2, "yes", "no")) 
+   
+   # Prepare X axis
+   axisdf <- don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
+   
+   # Make the plot
+   man_plot <- ggplot(don, aes(x=BPcum, y=BPcum)) +
+     
+     # Show all points
+     geom_point( aes(color="Common"), alpha=0.8, size=1) +
+     
+     # custom X axis:
+     scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
+     scale_y_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
+     # Add highlighted points
+     geom_point(data=subset(don, is_highlight=="yes"), aes(color="MARSweb"), size=1) +
+     geom_point(data=subset(don, is_highlight2=="yes"), aes(color="Set-based"), size=1) +
+     scale_color_manual(name="", values=c("Common"="gray", "MARSweb"="red", "Set-based"="blue")) +
+     # Add label using ggrepel to avoid overlapping
+     #  geom_label_repel( data=subset(don, is_annotate=="yes"), aes(label=GENE), size=2, color="red") +
+     #  geom_label_repel( data=subset(don, is_annotate2=="yes"), aes(label=GENE), size=2, color="blue") +
+     
+     # Custom the theme:
+     theme_bw() +
+     theme( 
+       panel.border = element_blank(),
+       panel.grid.major.x = element_blank(),
+       legend.text = element_text(face = "bold"),
+       legend.position= c(0.9,0.5),
+       legend.margin = margin(0,0,0,0)
+       #      panel.grid.minor.x = element_blank()
+     ) +   labs(x = "Chromosome", y = "Chromosome")
+   pdf(paste(outputpath,".pdf", sep=""))
+   print(man_plot)
+   dev.off()
+ }
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  1.601   0.124   1.701 
